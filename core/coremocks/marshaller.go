// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package coremocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// Marshaller is an autogenerated mock type for the Marshaller type
type Marshaller struct {
	mock.Mock
}

// GetType provides a mock function with given fields: typeName
func (_m *Marshaller) GetType(typeName string) reflect.Type {
	ret := _m.Called(typeName)

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func(string) reflect.Type); ok {
		r0 = rf(typeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// Marshal provides a mock function with given fields: _a0
func (_m *Marshaller) Marshal(_a0 interface{}) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterType provides a mock function with given fields: typeName, v
func (_m *Marshaller) RegisterType(typeName string, v reflect.Type) {
	_m.Called(typeName, v)
}

// Unmarshal provides a mock function with given fields: _a0, _a1
func (_m *Marshaller) Unmarshal(_a0 []byte, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
